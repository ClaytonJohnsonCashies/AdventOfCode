<Query Kind="Program" />

void Main()
{
	var startGrid = Inputs.Input1.Split(Environment.NewLine).Select(e => e.ToList()).ToList();
	int width = startGrid[0].Count;
	int height = startGrid.Count;
	var mirrorGrid = new MirrorGrid(startGrid);
	
	long startingStrength = 100000000L;//width * height;
	var countEnergisedTiles = mirrorGrid.ShootLasers(new LightFlow(new Position(0, 0), Direction.Right, startingStrength));
	countEnergisedTiles.DumpTell();


	long maxCountEnergisedTiles = 0L;
	for (int x = 0; x < width; x++)
		maxCountEnergisedTiles = Math.Max(maxCountEnergisedTiles, mirrorGrid.ShootLasers(new LightFlow(new Position(x, 0), Direction.Down, startingStrength)));
	for (int x = 0; x < width; x++)
		maxCountEnergisedTiles = Math.Max(maxCountEnergisedTiles, mirrorGrid.ShootLasers(new LightFlow(new Position(x, height - 1), Direction.Up, startingStrength)));
	for (int y = 0; y < height; y++)
		maxCountEnergisedTiles = Math.Max(maxCountEnergisedTiles, mirrorGrid.ShootLasers(new LightFlow(new Position(0, y), Direction.Right, startingStrength)));
	for (int y = 0; y < height; y++)
		maxCountEnergisedTiles = Math.Max(maxCountEnergisedTiles, mirrorGrid.ShootLasers(new LightFlow(new Position(width - 1, y), Direction.Left, startingStrength)));
		
	maxCountEnergisedTiles.DumpTell();
}

public class MirrorGrid
{
	private readonly List<List<char>> _grid;
	private readonly int _width;
	private readonly int _height;
	
	public MirrorGrid(List<List<char>> grid)
	{
		_grid = grid;
		_width = grid[0].Count;
		_height = grid.Count;
	}
	
	public long ShootLasers(LightFlow startingFlow)
	{
		var energisedGrid = new List<List<EnergisedState>>();
		for (int ii = 0; ii < _grid.Count; ii++)
		{
			energisedGrid.Add(new List<EnergisedState>());
			for (int jj = 0; jj < _grid[0].Count; jj++)
				energisedGrid[ii].Add(new EnergisedState());
		}

		Queue<LightFlow> searchSpace = new Queue<LightFlow>();		
		searchSpace.Enqueue(startingFlow);

		Func<LightFlow, List<LightFlow>> newStateFunc = (LightFlow state) =>
		{
			if (!energisedGrid[state.CurrentPosition.Y][state.CurrentPosition.X].TryEnergise(state.Direction))
				return new List<LightFlow>();

			if (state.Strength == 0)
				return new List<LightFlow>();

			List<LightFlow> newStates = new List<LightFlow>();
			switch (_grid[state.CurrentPosition.Y][state.CurrentPosition.X])
			{
				case '|':
					if (state.Direction.IsHorizontal())
					{
						if (state.CurrentPosition.Y > 0) newStates.Add(state.Up());
						if (state.CurrentPosition.Y < _height - 1) newStates.Add(state.Down());
					}
					else
					{
						if (state.Direction == Direction.Down && state.CurrentPosition.Y < _height - 1) newStates.Add(state.Down());
						else if (state.Direction == Direction.Up && state.CurrentPosition.Y > 0) newStates.Add(state.Up());
					}
					break;
				case '-':
					if (state.Direction.IsHorizontal())
					{
						if (state.Direction == Direction.Left && state.CurrentPosition.X > 0) newStates.Add(state.Left());
						else if (state.Direction == Direction.Right && state.CurrentPosition.X < _width - 1) newStates.Add(state.Right());
					}
					else
					{
						if (state.CurrentPosition.X > 0) newStates.Add(state.Left());
						if (state.CurrentPosition.X < _width - 1) newStates.Add(state.Right());
					}
					break;
				case '\\':
					if (state.Direction.IsHorizontal())
					{
						if (state.Direction == Direction.Right && state.CurrentPosition.Y < _height - 1) newStates.Add(state.Down());
						else if (state.Direction == Direction.Left && state.CurrentPosition.Y > 0) newStates.Add(state.Up());
					}
					else
					{
						if (state.Direction == Direction.Down && state.CurrentPosition.X < _width - 1) newStates.Add(state.Right());
						if (state.Direction == Direction.Up && state.CurrentPosition.X > 0) newStates.Add(state.Left());
					}
					break;
				case '/':
					if (state.Direction.IsHorizontal())
					{
						if (state.Direction == Direction.Left && state.CurrentPosition.Y < _height - 1) newStates.Add(state.Down());
						else if (state.Direction == Direction.Right && state.CurrentPosition.Y > 0) newStates.Add(state.Up());
					}
					else
					{
						if (state.Direction == Direction.Up && state.CurrentPosition.X < _width - 1) newStates.Add(state.Right());
						if (state.Direction == Direction.Down && state.CurrentPosition.X > 0) newStates.Add(state.Left());
					}
					break;
				default:
					switch (state.Direction)
					{
						case Direction.Up:
							if (state.CurrentPosition.Y > 0) newStates.Add(state.Up());
							break;
						case Direction.Down:
							if (state.CurrentPosition.Y < _height - 1) newStates.Add(state.Down());
							break;
						case Direction.Left:
							if (state.CurrentPosition.X > 0) newStates.Add(state.Left());
							break;
						case Direction.Right:
							if (state.CurrentPosition.X < _width - 1) newStates.Add(state.Right());
							break;
					}
					break;
			}

			return newStates;
		};

		bool found = false;
		while (!found && searchSpace.Count() > 0)
		{
			var state = searchSpace.Dequeue();

			var newStates = newStateFunc(state);
			foreach (var s in newStates)
				searchSpace.Enqueue(s);
		}

		//RenderGrid(energisedGrid);
		
		return energisedGrid.Select(r => r.Sum(c => c.IsEnergised ? 1 : 0)).Sum();
	}

	public void RenderGrid(List<List<EnergisedState>> grid)
	{
		foreach (var row in grid)
		{
			new string(row.Select(r => r.IsEnergised ? '#' : '.').ToArray()).DumpMonospace();
		}
	}
}

public readonly record struct LightFlow(Position CurrentPosition, Direction Direction, long Strength)
{
	public LightFlow Up()
	{
		return new LightFlow(CurrentPosition.Up(), Direction.Up, Strength - 1);
	}

	public LightFlow Down()
	{
		return new LightFlow(CurrentPosition.Down(), Direction.Down, Strength - 1);
	}

	public LightFlow Left()
	{
		return new LightFlow(CurrentPosition.Left(), Direction.Left, Strength - 1);
	}

	public LightFlow Right()
	{
		return new LightFlow(CurrentPosition.Right(), Direction.Right, Strength - 1);
	}
}

public readonly record struct Position(int X, int Y)
{
	public Position Up()
	{
		return new Position(X, Y - 1);
	}

	public Position Down()
	{
		return new Position(X, Y + 1);
	}

	public Position Left()
	{
		return new Position(X - 1, Y);
	}

	public Position Right()
	{
		return new Position(X + 1, Y);
	}
}

public enum Direction
{
	Up,
	Down,
	Left,
	Right
}

public static class DirectionExt
{
	public static bool IsHorizontal(this Direction direction)
	{
		switch (direction)
		{
			case Direction.Left:
			case Direction.Right:
				return true;
			default:
				return false;
		}
	}

	public static bool IsVertical(this Direction direction)
	{
		switch (direction)
		{
			case Direction.Up:
			case Direction.Down:
				return true;
			default:
				return false;
		}
	}
}

public class EnergisedState
{
	public bool IsEnergised { get; private set; }
	public bool ThroughUp { get; private set; }
	public bool ThroughDown { get; private set; }
	public bool ThroughLeft { get; private set; }
	public bool ThroughRight { get; private set; }
	
	// returns false when already energised from that direction
	public bool TryEnergise(Direction fromDirection)
	{
		bool result = true;
		IsEnergised = true;

		if (fromDirection == Direction.Up)
		{
			result = !ThroughUp;
			ThroughUp = true;
		}
		else if (fromDirection == Direction.Down)
		{
			result = !ThroughDown;
			ThroughDown = true;
		}
		else if (fromDirection == Direction.Left)
		{
			result = !ThroughLeft;
			ThroughLeft = true;
		}
		else if (fromDirection == Direction.Right)
		{
			result = !ThroughRight;
			ThroughRight = true;
		}
			
		return result;
	}
}

public class Inputs
{
	public const string Example1 =
@".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";

	public const string Input1 =
@"\.|...|...-/..........-.............|./..........\...................\.-......-...../..../.........-../.......
................-...........................................\...................|......-......................
.\..........|...|............................|..............\................../......\..................|....
\...-..|......--..............|.................................|................\..........-........-......-.
............\......./.........................\........../..../............\......./.........................-
.........|............................/...................-................-../.\|.................-..\.......
.......................|............................/.../\-.....-....-\-|.........-/|....\........\.........\.
.\-............................../.....................................|................|....................|
....../...........................\......././-.........|............................................/.........
.............|................/......|......./.|...|.....................|....................................
.......|.............\...............\.....|.....\......................\.............-.......|...../.........
|........-........-...\...........|............|......-.|.......|.................|............/......-.......
..............\...............\......-........|../........................../..................|/.........|...
............\.../................\.....................\...|............/.........................\.....\.....
...../......./......../............|......\...\...........\.........-...............-..................\..|...
................\....\.|...............-......-..../.-\......................-.........|......................
.............../................\.............//.....\...................................-....\......../......
...............\.............................\...-..\.......\.\.................|..............||/............
.........../........./...././...........................\..../........-.......|.--.......................|.|..
..\............/..|......|.\.|/...............|......|........./.|.....................................\......
..........||........-...../.........................................-.............../.....................\...
................|........../..........................-....-../...................................\........-..
.............................-..-.................../..-...-.......|..................|......../............./
................\......................\........./...-...\|.............\..|.....|............|/...........-..
............|/../..-.................|./.......................\..............................................
.................................../.........-..-..-...-............-....-....\...........\..\.|....-.........
..../.......|..................-.....|./.-......-|............................................................
......../........................./.-./.............................................\.....\-\..|....../.......
-...........................-.\........-........|......|.........|....-....|......|......\..............-./...
./....-/.........-.................\.......\......./..............|.........||.|...........-..........-..|...|
...........................|........||................|..../.-.|...............-..............................
../.../................................../...-..........-.................../.../.............................
.................-.../..............\-........-/...../........................................./.....|../.....
....................\..//.....|...\............/................./...................-.......\\..........-....
....-.\..-...........\.............................\.......................\.................|.......|.......|
.|.../.............................\.-......\.............../.../................/....|.......................
...................-.|.............|............../.......................................|.................|.
\......................../.....-......|....|..............\\............|....................\......./........
...../..........|.................\.....\.../..............--....|.|.............................-............
....\...|........./................\......................................................./....../...-...\...
......-......................|../.......\.....|../...|..\...................|..\.........../....\|...........-
/.........-..........-..\..................\....-....../.-.........|.................\......./...-.|......../.
......-..|\................../../...|.|...................../........................\.|-/....................
......../..............\...............................-....|/....../.\.......\..-..../...../....\..//........
..\..|./.......|................../...../.........\.........../..\\...|.........................\|............
|..|............../.....\..-................/................\............|\..................................
...\.../...\.................|.....................|.............|............................................
|.-...\.......-............../....-....../..-./..../.....-............|...|......|..-...\./....\/-....\.......
..........|...............\.\...............................\...../...........-\.........\./.............../..
.../....../....-.........-...\./...........\....|............-..........-|.....|...|..-./.........../.........
/\................\..|............./..-..../.....................\..............\...|.............|........../
\.............\...............................\.........-..\....../.-............\/..../.\...\...\\...........
.............\/...\.\................................\.-..................../....\....................//..-...
..|../.../....................................|........\............................|.............../.........
............/..............\..../..|.-......\.\..|...............\..-.....|.............../.../\.......|......
...............\....\...............................-.|....|..............-.......|..........-......\.........
..|.....\...............-........./.......................-...|..........\./.....\...../................|.....
..\.........|..............-.....|.-............\.................\.........................|........||.......
/...............-./..........|...\...................................-...\......-.../....../.....|............
................................./.-..................-.........................-.............|.........\./...
..|.|.....................-............|/...................\............/.-......-.....\../.|.....|..........
..-./......|............../....-......\..............|-.....................\................-............\...
............................/...........|.-.\..../.\.......\............|.....................................
........................|........................................................../....\..-........|...|.....
....-............\............................\......|.........|\.............../-...........|......\.-.|...|.
.....\........../.....|......-././.......\.-............-/..........-....././..-......|...|-........|.........
.........-.|......../....\|...-........||....../........|-....|.........................|................-.-..
..-.........--.........../...\...............................\..|../...\..../.../..................|...-....\.
.................\.../...........-..........|..../...............|.............|..........||.........\........
......./-..../................\../-................................/...............|.......|.\.......-.....|..
../..-........./.|..\..\..../.\............/......-.|....\.....-...................................../.-....|.
......./........../..........|...../....................\../...\....................-......\......|......../..
.....\...-.....-\...................|....../.....-.....................\......................................
.....-......./............-........................../....|.................-..........|..............\.......
....//.........................|.......|...|................./........-...........|......|-.....././..........
.........../.........|-....................................\.-....|...-....................|.../..........//..
.................................\/......................................\..||.......................\........
.............................../.........\.......-...|...................................\.|..........|.......
.......-\.........|......./.............................|..|...................-.../....../\.....\............
...................\.....\.-......../......|......-...\.|........|.../...................................\....
........................\.......-..|/....-../.........-..-....\............./../.........\................../.
..-.-......-....-..-.....-........|..../...........................||-/................./.|......./.../....-..
......|....|....|../...........-.|....-........|........-.......|.............\.......-|..-......-../..-......
...-......-|...\...................|..-..../...||....-..........|./.../.|...\........|./.......|./\|..........
.................-\|./..................|...........................\.............|...../.........|.....\.....
...\.\....................//..................-......-...................\.....\.......................\......
........./.................|..-........../.........|..|........../..|..\.........-/........\.-................
.../.\....|....../.../............................-.......\...........|.....|....-.-........./......../.......
........|...............|.......-...|..-.......\.-.........|......-...|..................-....................
......\./.../..................................\.............|......./../..\.......-....../...-..|..\..\......
/......./...-............/\..|.............-......\.....-.......-....|......../..........-....................
.\.|..../.....--........-....-.../.............|................................|.........-.\.....-..|........
.-.....................-.|.............................../..\...........|.................|./......-..........
......................................\.......\..............................-.........|......-........|......
........../....|...........|...|.\...\......................../.............|......../......../....-.-.....-..
....\....|.............................../\........................../......-......................|.......-..
\../..........|.....................|.../...-...../.\......\.\........-..............|........-....-..\.......
....................|...............-........./........-.-........||............\..................|.....-....
........-|...........|.-..|.................\../.............................\./.................\............
..........-.\..../.......\.....................-................../.............\........-....\|./............
....................................../...-...|.|...............................|......./.......-.............
............../............/............./............\...../..................../...\.-......................
.|/..........|.\....................|...../.........|...................................\...|\..\.............
.\......././|............/...\...\...............-......../../..........................-./.........-.........
.-............|.........................-|............|.....-............\...........|........-...............
..-...............-......../............../.........././....../......-..............-......\.//-..............
...-.|................................../.....\....-...............-............-..........-........../...\...
....................-.....-.........-\....\....-./......................................./..............-.\\./
.............../.|........-......-..........................\./........\...\...|.-..............\.....-......|
...../......\................//........-..............-...........-...................\./....\..............-.";
}